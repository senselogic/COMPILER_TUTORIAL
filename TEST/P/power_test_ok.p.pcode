ssp 0
ujp @program
define @function_int_GetRecursivePower_int_int_of_void_main
ssp 8
; P/power_test_ok.p(16) : if ( exponent == 0 )
; exponent of int_GetRecursivePower_int_int_of_void_main
lda i 0 6
ind i
; 0
ldc i 0
; P/power_test_ok.p(16) : =
equ i
fjp @if_else_1
; P/power_test_ok.p(18) : power = 1 ;
; power of int_GetRecursivePower_int_int_of_void_main
lda i 0 7
; 1
ldc i 1
; P/power_test_ok.p(18) : :=
sto i
ujp @if_end_1
define @if_else_1
; P/power_test_ok.p(20) : else
; P/power_test_ok.p(22) : power = basis * GetRecursivePower ( basis , exponent - 1 ) ;
; power of int_GetRecursivePower_int_int_of_void_main
lda i 0 7
; basis of int_GetRecursivePower_int_int_of_void_main
lda i 0 5
ind i
mst 1
; basis of int_GetRecursivePower_int_int_of_void_main
lda i 0 5
ind i
; exponent of int_GetRecursivePower_int_int_of_void_main
lda i 0 6
ind i
; 1
ldc i 1
; P/power_test_ok.p(22) : -
sub i
cup 2 @function_int_GetRecursivePower_int_int_of_void_main
; P/power_test_ok.p(22) : *
mul i
; P/power_test_ok.p(22) : :=
sto i
define @if_end_1
; P/power_test_ok.p(25) : return power ;
lda i 0 0
; power of int_GetRecursivePower_int_int_of_void_main
lda i 0 7
ind i
sto i
retf
retf
define @function_void_SetRecursivePower_int_int_int_of_void_main
ssp 8
; P/power_test_ok.p(34) : if ( exponent == 0 )
; exponent of void_SetRecursivePower_int_int_int_of_void_main
lda i 0 7
ind i
; 0
ldc i 0
; P/power_test_ok.p(34) : =
equ i
fjp @if_else_2
; P/power_test_ok.p(36) : power = 1 ;
; power of void_SetRecursivePower_int_int_int_of_void_main
lod a 0 5
; 1
ldc i 1
; P/power_test_ok.p(36) : :=
sto i
ujp @if_end_2
define @if_else_2
; P/power_test_ok.p(38) : else
; P/power_test_ok.p(40) : SetRecursivePower ( power , basis , exponent - 1 ) ;
mst 1
; power of void_SetRecursivePower_int_int_int_of_void_main
lod a 0 5
; basis of void_SetRecursivePower_int_int_int_of_void_main
lda i 0 6
ind i
; exponent of void_SetRecursivePower_int_int_int_of_void_main
lda i 0 7
ind i
; 1
ldc i 1
; P/power_test_ok.p(40) : -
sub i
cup 3 @function_void_SetRecursivePower_int_int_int_of_void_main
; P/power_test_ok.p(41) : power = power * basis ;
; power of void_SetRecursivePower_int_int_int_of_void_main
lod a 0 5
; power of void_SetRecursivePower_int_int_int_of_void_main
lod a 0 5
ind i
; basis of void_SetRecursivePower_int_int_int_of_void_main
lda i 0 6
ind i
; P/power_test_ok.p(41) : *
mul i
; P/power_test_ok.p(41) : :=
sto i
define @if_end_2
retp
define @function_int_GetPower_int_int_of_void_main
ssp 8
; P/power_test_ok.p(51) : power = 1 ;
; power of int_GetPower_int_int_of_void_main
lda i 0 7
; 1
ldc i 1
; P/power_test_ok.p(51) : :=
sto i
; P/power_test_ok.p(53) : while ( 0 < exponent )
define @while_3
; 0
ldc i 0
; exponent of int_GetPower_int_int_of_void_main
lda i 0 6
ind i
; P/power_test_ok.p(53) : <
les i
fjp @while_end_3
; P/power_test_ok.p(55) : power = power * basis ;
; power of int_GetPower_int_int_of_void_main
lda i 0 7
; power of int_GetPower_int_int_of_void_main
lda i 0 7
ind i
; basis of int_GetPower_int_int_of_void_main
lda i 0 5
ind i
; P/power_test_ok.p(55) : *
mul i
; P/power_test_ok.p(55) : :=
sto i
; P/power_test_ok.p(56) : exponent = exponent - 1 ;
; exponent of int_GetPower_int_int_of_void_main
lda i 0 6
; exponent of int_GetPower_int_int_of_void_main
lda i 0 6
ind i
; 1
ldc i 1
; P/power_test_ok.p(56) : -
sub i
; P/power_test_ok.p(56) : :=
sto i
ujp @while_3
define @while_end_3
; P/power_test_ok.p(59) : return power ;
lda i 0 0
; power of int_GetPower_int_int_of_void_main
lda i 0 7
ind i
sto i
retf
retf
define @function_void_SetPower_int_int_int_of_void_main
ssp 8
; P/power_test_ok.p(68) : power = GetPower ( basis , exponent ) ;
; power of void_SetPower_int_int_int_of_void_main
lod a 0 5
mst 1
; basis of void_SetPower_int_int_int_of_void_main
lda i 0 6
ind i
; exponent of void_SetPower_int_int_int_of_void_main
lda i 0 7
ind i
cup 2 @function_int_GetPower_int_int_of_void_main
; P/power_test_ok.p(68) : :=
sto i
retp
define @function_int_GetSquare_int_of_void_main
ssp 7
; P/power_test_ok.p(78) : square = GetPower ( basis , 2 ) ;
; square of int_GetSquare_int_of_void_main
lda i 0 6
mst 1
; basis of int_GetSquare_int_of_void_main
lda i 0 5
ind i
; 2
ldc i 2
cup 2 @function_int_GetPower_int_int_of_void_main
; P/power_test_ok.p(78) : :=
sto i
; P/power_test_ok.p(80) : return square ;
lda i 0 0
; square of int_GetSquare_int_of_void_main
lda i 0 6
ind i
sto i
retf
retf
define @function_void_SetSquare_int_int_of_void_main
ssp 7
; P/power_test_ok.p(88) : SetPower ( square , basis , 2 ) ;
mst 1
; square of void_SetSquare_int_int_of_void_main
lod a 0 5
; basis of void_SetSquare_int_int_of_void_main
lda i 0 6
ind i
; 2
ldc i 2
cup 3 @function_void_SetPower_int_int_int_of_void_main
retp
define @function_void_main
ssp 7
; P/power_test_ok.p(91) : power = GetRecursivePower ( 5 , 2 ) ;
; power of void_main
lda i 0 5
mst 0
; 5
ldc i 5
; 2
ldc i 2
cup 2 @function_int_GetRecursivePower_int_int_of_void_main
; P/power_test_ok.p(91) : :=
sto i
; P/power_test_ok.p(92) : write power ;
; power of void_main
lda i 0 5
ind i
; P/power_test_ok.p(92) : write
prin
; P/power_test_ok.p(94) : SetRecursivePower ( power , 5 , 2 ) ;
mst 0
; power of void_main
lda i 0 5
; 5
ldc i 5
; 2
ldc i 2
cup 3 @function_void_SetRecursivePower_int_int_int_of_void_main
; P/power_test_ok.p(95) : write power ;
; power of void_main
lda i 0 5
ind i
; P/power_test_ok.p(95) : write
prin
; P/power_test_ok.p(97) : power = GetPower ( 5 , 2 ) ;
; power of void_main
lda i 0 5
mst 0
; 5
ldc i 5
; 2
ldc i 2
cup 2 @function_int_GetPower_int_int_of_void_main
; P/power_test_ok.p(97) : :=
sto i
; P/power_test_ok.p(98) : write power ;
; power of void_main
lda i 0 5
ind i
; P/power_test_ok.p(98) : write
prin
; P/power_test_ok.p(100) : SetPower ( power , 5 , 2 ) ;
mst 0
; power of void_main
lda i 0 5
; 5
ldc i 5
; 2
ldc i 2
cup 3 @function_void_SetPower_int_int_int_of_void_main
; P/power_test_ok.p(101) : write power ;
; power of void_main
lda i 0 5
ind i
; P/power_test_ok.p(101) : write
prin
; P/power_test_ok.p(103) : square = GetSquare ( 5 ) ;
; square of void_main
lda i 0 6
mst 0
; 5
ldc i 5
cup 1 @function_int_GetSquare_int_of_void_main
; P/power_test_ok.p(103) : :=
sto i
; P/power_test_ok.p(104) : write square ;
; square of void_main
lda i 0 6
ind i
; P/power_test_ok.p(104) : write
prin
; P/power_test_ok.p(106) : SetSquare ( square , 5 ) ;
mst 0
; square of void_main
lda i 0 6
; 5
ldc i 5
cup 2 @function_void_SetSquare_int_int_of_void_main
; P/power_test_ok.p(107) : write square ;
; square of void_main
lda i 0 6
ind i
; P/power_test_ok.p(107) : write
prin
retp
define @program
mst 0
cup 0 @function_void_main
stp
; P/power_test_ok.p(1) :    Program
; P/power_test_ok.p(1) :        FunctionDeclaration
; P/power_test_ok.p(1) :            "func"
; P/power_test_ok.p(1) :            FunctionName
; P/power_test_ok.p(1) :                "main"
; P/power_test_ok.p(1) :            "("
; P/power_test_ok.p(2) :            FunctionParameterList
; P/power_test_ok.p(2) :            ")"
; P/power_test_ok.p(2) :            ":"
; P/power_test_ok.p(2) :            FunctionType
; P/power_test_ok.p(2) :                "void"
; P/power_test_ok.p(3) :            "{"
; P/power_test_ok.p(4) :            LocalDeclarationList
; P/power_test_ok.p(4) :                LocalDeclaration
; P/power_test_ok.p(4) :                    VariableDeclaration
; P/power_test_ok.p(4) :                        "var"
; P/power_test_ok.p(5) :                        Variable
; P/power_test_ok.p(5) :                            VariableName
; P/power_test_ok.p(5) :                                "power"
; P/power_test_ok.p(5) :                            ":"
; P/power_test_ok.p(5) :                            VariableType
; P/power_test_ok.p(5) :                                "int"
; P/power_test_ok.p(5) :                        ","
; P/power_test_ok.p(6) :                        Variable
; P/power_test_ok.p(6) :                            VariableName
; P/power_test_ok.p(6) :                                "square"
; P/power_test_ok.p(6) :                            ":"
; P/power_test_ok.p(6) :                            VariableType
; P/power_test_ok.p(6) :                                "int"
; P/power_test_ok.p(6) :                        ";"
; P/power_test_ok.p(8) :                LocalDeclaration
; P/power_test_ok.p(8) :                    FunctionDeclaration
; P/power_test_ok.p(8) :                        "func"
; P/power_test_ok.p(8) :                        FunctionName
; P/power_test_ok.p(8) :                            "GetRecursivePower"
; P/power_test_ok.p(8) :                        "("
; P/power_test_ok.p(9) :                        FunctionParameterList
; P/power_test_ok.p(9) :                            FunctionParameter
; P/power_test_ok.p(9) :                                VariableName
; P/power_test_ok.p(9) :                                    "basis"
; P/power_test_ok.p(9) :                                ":"
; P/power_test_ok.p(9) :                                VariableType
; P/power_test_ok.p(9) :                                    "int"
; P/power_test_ok.p(9) :                            ","
; P/power_test_ok.p(10) :                           FunctionParameter
; P/power_test_ok.p(10) :                               VariableName
; P/power_test_ok.p(10) :                                   "exponent"
; P/power_test_ok.p(10) :                               ":"
; P/power_test_ok.p(10) :                               VariableType
; P/power_test_ok.p(10) :                                   "int"
; P/power_test_ok.p(11) :                       ")"
; P/power_test_ok.p(11) :                       ":"
; P/power_test_ok.p(11) :                       FunctionType
; P/power_test_ok.p(11) :                           "int"
; P/power_test_ok.p(12) :                       "{"
; P/power_test_ok.p(13) :                       LocalDeclarationList
; P/power_test_ok.p(13) :                           LocalDeclaration
; P/power_test_ok.p(13) :                               VariableDeclaration
; P/power_test_ok.p(13) :                                   "var"
; P/power_test_ok.p(14) :                                   Variable
; P/power_test_ok.p(14) :                                       VariableName
; P/power_test_ok.p(14) :                                           "power"
; P/power_test_ok.p(14) :                                       ":"
; P/power_test_ok.p(14) :                                       VariableType
; P/power_test_ok.p(14) :                                           "int"
; P/power_test_ok.p(14) :                                   ";"
; P/power_test_ok.p(16) :                       StatementList
; P/power_test_ok.p(16) :                           Statement
; P/power_test_ok.p(16) :                               IfStatement
; P/power_test_ok.p(16) :                                   "if"
; P/power_test_ok.p(16) :                                   ParenthesisExpression
; P/power_test_ok.p(16) :                                       "("
; P/power_test_ok.p(16) :                                       EqualExpression
; P/power_test_ok.p(16) :                                           VariableExpression
; P/power_test_ok.p(16) :                                               VariableName
; P/power_test_ok.p(16) :                                                   "exponent"
; P/power_test_ok.p(16) :                                           "=="
; P/power_test_ok.p(16) :                                           IntegerConstantExpression
; P/power_test_ok.p(16) :                                               IntegerConstant
; P/power_test_ok.p(16) :                                                   "0"
; P/power_test_ok.p(16) :                                       ")"
; P/power_test_ok.p(17) :                                   "{"
; P/power_test_ok.p(18) :                                   StatementList
; P/power_test_ok.p(18) :                                       Statement
; P/power_test_ok.p(18) :                                           AssignmentStatement
; P/power_test_ok.p(18) :                                               VariableExpression
; P/power_test_ok.p(18) :                                                   VariableName
; P/power_test_ok.p(18) :                                                       "power"
; P/power_test_ok.p(18) :                                               "="
; P/power_test_ok.p(18) :                                               IntegerConstantExpression
; P/power_test_ok.p(18) :                                                   IntegerConstant
; P/power_test_ok.p(18) :                                                       "1"
; P/power_test_ok.p(18) :                                               ";"
; P/power_test_ok.p(19) :                                   "}"
; P/power_test_ok.p(20) :                                   ElseStatement
; P/power_test_ok.p(20) :                                       "else"
; P/power_test_ok.p(21) :                                       "{"
; P/power_test_ok.p(22) :                                       StatementList
; P/power_test_ok.p(22) :                                           Statement
; P/power_test_ok.p(22) :                                               AssignmentStatement
; P/power_test_ok.p(22) :                                                   VariableExpression
; P/power_test_ok.p(22) :                                                       VariableName
; P/power_test_ok.p(22) :                                                           "power"
; P/power_test_ok.p(22) :                                                   "="
; P/power_test_ok.p(22) :                                                   StarExpression
; P/power_test_ok.p(22) :                                                       VariableExpression
; P/power_test_ok.p(22) :                                                           VariableName
; P/power_test_ok.p(22) :                                                               "basis"
; P/power_test_ok.p(22) :                                                       "*"
; P/power_test_ok.p(22) :                                                       FunctionCallExpression
; P/power_test_ok.p(22) :                                                           FunctionCall
; P/power_test_ok.p(22) :                                                               FunctionName
; P/power_test_ok.p(22) :                                                                   "GetRecursivePower"
; P/power_test_ok.p(22) :                                                               "("
; P/power_test_ok.p(22) :                                                               FunctionArgumentList
; P/power_test_ok.p(22) :                                                                   FunctionArgument
; P/power_test_ok.p(22) :                                                                       VariableExpression
; P/power_test_ok.p(22) :                                                                           VariableName
; P/power_test_ok.p(22) :                                                                               "basis"
; P/power_test_ok.p(22) :                                                                   ","
; P/power_test_ok.p(22) :                                                                   FunctionArgument
; P/power_test_ok.p(22) :                                                                       MinusExpression
; P/power_test_ok.p(22) :                                                                           VariableExpression
; P/power_test_ok.p(22) :                                                                               VariableName
; P/power_test_ok.p(22) :                                                                                   "exponent"
; P/power_test_ok.p(22) :                                                                           "-"
; P/power_test_ok.p(22) :                                                                           IntegerConstantExpression
; P/power_test_ok.p(22) :                                                                               IntegerConstant
; P/power_test_ok.p(22) :                                                                                   "1"
; P/power_test_ok.p(22) :                                                               ")"
; P/power_test_ok.p(22) :                                                   ";"
; P/power_test_ok.p(23) :                                       "}"
; P/power_test_ok.p(25) :                           Statement
; P/power_test_ok.p(25) :                               ReturnStatement
; P/power_test_ok.p(25) :                                   "return"
; P/power_test_ok.p(25) :                                   VariableExpression
; P/power_test_ok.p(25) :                                       VariableName
; P/power_test_ok.p(25) :                                           "power"
; P/power_test_ok.p(25) :                                   ";"
; P/power_test_ok.p(26) :                       "}"
; P/power_test_ok.p(28) :               LocalDeclaration
; P/power_test_ok.p(28) :                   FunctionDeclaration
; P/power_test_ok.p(28) :                       "func"
; P/power_test_ok.p(28) :                       FunctionName
; P/power_test_ok.p(28) :                           "SetRecursivePower"
; P/power_test_ok.p(28) :                       "("
; P/power_test_ok.p(29) :                       FunctionParameterList
; P/power_test_ok.p(29) :                           FunctionParameter
; P/power_test_ok.p(29) :                               "ref"
; P/power_test_ok.p(29) :                               VariableName
; P/power_test_ok.p(29) :                                   "power"
; P/power_test_ok.p(29) :                               ":"
; P/power_test_ok.p(29) :                               VariableType
; P/power_test_ok.p(29) :                                   "int"
; P/power_test_ok.p(29) :                           ","
; P/power_test_ok.p(30) :                           FunctionParameter
; P/power_test_ok.p(30) :                               VariableName
; P/power_test_ok.p(30) :                                   "basis"
; P/power_test_ok.p(30) :                               ":"
; P/power_test_ok.p(30) :                               VariableType
; P/power_test_ok.p(30) :                                   "int"
; P/power_test_ok.p(30) :                           ","
; P/power_test_ok.p(31) :                           FunctionParameter
; P/power_test_ok.p(31) :                               VariableName
; P/power_test_ok.p(31) :                                   "exponent"
; P/power_test_ok.p(31) :                               ":"
; P/power_test_ok.p(31) :                               VariableType
; P/power_test_ok.p(31) :                                   "int"
; P/power_test_ok.p(32) :                       ")"
; P/power_test_ok.p(32) :                       ":"
; P/power_test_ok.p(32) :                       FunctionType
; P/power_test_ok.p(32) :                           "void"
; P/power_test_ok.p(33) :                       "{"
; P/power_test_ok.p(34) :                       LocalDeclarationList
; P/power_test_ok.p(34) :                       StatementList
; P/power_test_ok.p(34) :                           Statement
; P/power_test_ok.p(34) :                               IfStatement
; P/power_test_ok.p(34) :                                   "if"
; P/power_test_ok.p(34) :                                   ParenthesisExpression
; P/power_test_ok.p(34) :                                       "("
; P/power_test_ok.p(34) :                                       EqualExpression
; P/power_test_ok.p(34) :                                           VariableExpression
; P/power_test_ok.p(34) :                                               VariableName
; P/power_test_ok.p(34) :                                                   "exponent"
; P/power_test_ok.p(34) :                                           "=="
; P/power_test_ok.p(34) :                                           IntegerConstantExpression
; P/power_test_ok.p(34) :                                               IntegerConstant
; P/power_test_ok.p(34) :                                                   "0"
; P/power_test_ok.p(34) :                                       ")"
; P/power_test_ok.p(35) :                                   "{"
; P/power_test_ok.p(36) :                                   StatementList
; P/power_test_ok.p(36) :                                       Statement
; P/power_test_ok.p(36) :                                           AssignmentStatement
; P/power_test_ok.p(36) :                                               VariableExpression
; P/power_test_ok.p(36) :                                                   VariableName
; P/power_test_ok.p(36) :                                                       "power"
; P/power_test_ok.p(36) :                                               "="
; P/power_test_ok.p(36) :                                               IntegerConstantExpression
; P/power_test_ok.p(36) :                                                   IntegerConstant
; P/power_test_ok.p(36) :                                                       "1"
; P/power_test_ok.p(36) :                                               ";"
; P/power_test_ok.p(37) :                                   "}"
; P/power_test_ok.p(38) :                                   ElseStatement
; P/power_test_ok.p(38) :                                       "else"
; P/power_test_ok.p(39) :                                       "{"
; P/power_test_ok.p(40) :                                       StatementList
; P/power_test_ok.p(40) :                                           Statement
; P/power_test_ok.p(40) :                                               ExpressionStatement
; P/power_test_ok.p(40) :                                                   FunctionCallExpression
; P/power_test_ok.p(40) :                                                       FunctionCall
; P/power_test_ok.p(40) :                                                           FunctionName
; P/power_test_ok.p(40) :                                                               "SetRecursivePower"
; P/power_test_ok.p(40) :                                                           "("
; P/power_test_ok.p(40) :                                                           FunctionArgumentList
; P/power_test_ok.p(40) :                                                               FunctionArgument
; P/power_test_ok.p(40) :                                                                   VariableExpression
; P/power_test_ok.p(40) :                                                                       VariableName
; P/power_test_ok.p(40) :                                                                           "power"
; P/power_test_ok.p(40) :                                                               ","
; P/power_test_ok.p(40) :                                                               FunctionArgument
; P/power_test_ok.p(40) :                                                                   VariableExpression
; P/power_test_ok.p(40) :                                                                       VariableName
; P/power_test_ok.p(40) :                                                                           "basis"
; P/power_test_ok.p(40) :                                                               ","
; P/power_test_ok.p(40) :                                                               FunctionArgument
; P/power_test_ok.p(40) :                                                                   MinusExpression
; P/power_test_ok.p(40) :                                                                       VariableExpression
; P/power_test_ok.p(40) :                                                                           VariableName
; P/power_test_ok.p(40) :                                                                               "exponent"
; P/power_test_ok.p(40) :                                                                       "-"
; P/power_test_ok.p(40) :                                                                       IntegerConstantExpression
; P/power_test_ok.p(40) :                                                                           IntegerConstant
; P/power_test_ok.p(40) :                                                                               "1"
; P/power_test_ok.p(40) :                                                           ")"
; P/power_test_ok.p(40) :                                                   ";"
; P/power_test_ok.p(41) :                                           Statement
; P/power_test_ok.p(41) :                                               AssignmentStatement
; P/power_test_ok.p(41) :                                                   VariableExpression
; P/power_test_ok.p(41) :                                                       VariableName
; P/power_test_ok.p(41) :                                                           "power"
; P/power_test_ok.p(41) :                                                   "="
; P/power_test_ok.p(41) :                                                   StarExpression
; P/power_test_ok.p(41) :                                                       VariableExpression
; P/power_test_ok.p(41) :                                                           VariableName
; P/power_test_ok.p(41) :                                                               "power"
; P/power_test_ok.p(41) :                                                       "*"
; P/power_test_ok.p(41) :                                                       VariableExpression
; P/power_test_ok.p(41) :                                                           VariableName
; P/power_test_ok.p(41) :                                                               "basis"
; P/power_test_ok.p(41) :                                                   ";"
; P/power_test_ok.p(42) :                                       "}"
; P/power_test_ok.p(43) :                       "}"
; P/power_test_ok.p(45) :               LocalDeclaration
; P/power_test_ok.p(45) :                   FunctionDeclaration
; P/power_test_ok.p(45) :                       "func"
; P/power_test_ok.p(45) :                       FunctionName
; P/power_test_ok.p(45) :                           "GetPower"
; P/power_test_ok.p(45) :                       "("
; P/power_test_ok.p(46) :                       FunctionParameterList
; P/power_test_ok.p(46) :                           FunctionParameter
; P/power_test_ok.p(46) :                               VariableName
; P/power_test_ok.p(46) :                                   "basis"
; P/power_test_ok.p(46) :                               ":"
; P/power_test_ok.p(46) :                               VariableType
; P/power_test_ok.p(46) :                                   "int"
; P/power_test_ok.p(46) :                           ","
; P/power_test_ok.p(46) :                           FunctionParameter
; P/power_test_ok.p(46) :                               VariableName
; P/power_test_ok.p(46) :                                   "exponent"
; P/power_test_ok.p(46) :                               ":"
; P/power_test_ok.p(46) :                               VariableType
; P/power_test_ok.p(46) :                                   "int"
; P/power_test_ok.p(46) :                       ")"
; P/power_test_ok.p(46) :                       ":"
; P/power_test_ok.p(46) :                       FunctionType
; P/power_test_ok.p(46) :                           "int"
; P/power_test_ok.p(47) :                       "{"
; P/power_test_ok.p(48) :                       LocalDeclarationList
; P/power_test_ok.p(48) :                           LocalDeclaration
; P/power_test_ok.p(48) :                               VariableDeclaration
; P/power_test_ok.p(48) :                                   "var"
; P/power_test_ok.p(49) :                                   Variable
; P/power_test_ok.p(49) :                                       VariableName
; P/power_test_ok.p(49) :                                           "power"
; P/power_test_ok.p(49) :                                       ":"
; P/power_test_ok.p(49) :                                       VariableType
; P/power_test_ok.p(49) :                                           "int"
; P/power_test_ok.p(49) :                                   ";"
; P/power_test_ok.p(51) :                       StatementList
; P/power_test_ok.p(51) :                           Statement
; P/power_test_ok.p(51) :                               AssignmentStatement
; P/power_test_ok.p(51) :                                   VariableExpression
; P/power_test_ok.p(51) :                                       VariableName
; P/power_test_ok.p(51) :                                           "power"
; P/power_test_ok.p(51) :                                   "="
; P/power_test_ok.p(51) :                                   IntegerConstantExpression
; P/power_test_ok.p(51) :                                       IntegerConstant
; P/power_test_ok.p(51) :                                           "1"
; P/power_test_ok.p(51) :                                   ";"
; P/power_test_ok.p(53) :                           Statement
; P/power_test_ok.p(53) :                               WhileStatement
; P/power_test_ok.p(53) :                                   "while"
; P/power_test_ok.p(53) :                                   ParenthesisExpression
; P/power_test_ok.p(53) :                                       "("
; P/power_test_ok.p(53) :                                       SmallerExpression
; P/power_test_ok.p(53) :                                           IntegerConstantExpression
; P/power_test_ok.p(53) :                                               IntegerConstant
; P/power_test_ok.p(53) :                                                   "0"
; P/power_test_ok.p(53) :                                           "<"
; P/power_test_ok.p(53) :                                           VariableExpression
; P/power_test_ok.p(53) :                                               VariableName
; P/power_test_ok.p(53) :                                                   "exponent"
; P/power_test_ok.p(53) :                                       ")"
; P/power_test_ok.p(54) :                                   "{"
; P/power_test_ok.p(55) :                                   StatementList
; P/power_test_ok.p(55) :                                       Statement
; P/power_test_ok.p(55) :                                           AssignmentStatement
; P/power_test_ok.p(55) :                                               VariableExpression
; P/power_test_ok.p(55) :                                                   VariableName
; P/power_test_ok.p(55) :                                                       "power"
; P/power_test_ok.p(55) :                                               "="
; P/power_test_ok.p(55) :                                               StarExpression
; P/power_test_ok.p(55) :                                                   VariableExpression
; P/power_test_ok.p(55) :                                                       VariableName
; P/power_test_ok.p(55) :                                                           "power"
; P/power_test_ok.p(55) :                                                   "*"
; P/power_test_ok.p(55) :                                                   VariableExpression
; P/power_test_ok.p(55) :                                                       VariableName
; P/power_test_ok.p(55) :                                                           "basis"
; P/power_test_ok.p(55) :                                               ";"
; P/power_test_ok.p(56) :                                       Statement
; P/power_test_ok.p(56) :                                           AssignmentStatement
; P/power_test_ok.p(56) :                                               VariableExpression
; P/power_test_ok.p(56) :                                                   VariableName
; P/power_test_ok.p(56) :                                                       "exponent"
; P/power_test_ok.p(56) :                                               "="
; P/power_test_ok.p(56) :                                               MinusExpression
; P/power_test_ok.p(56) :                                                   VariableExpression
; P/power_test_ok.p(56) :                                                       VariableName
; P/power_test_ok.p(56) :                                                           "exponent"
; P/power_test_ok.p(56) :                                                   "-"
; P/power_test_ok.p(56) :                                                   IntegerConstantExpression
; P/power_test_ok.p(56) :                                                       IntegerConstant
; P/power_test_ok.p(56) :                                                           "1"
; P/power_test_ok.p(56) :                                               ";"
; P/power_test_ok.p(57) :                                   "}"
; P/power_test_ok.p(59) :                           Statement
; P/power_test_ok.p(59) :                               ReturnStatement
; P/power_test_ok.p(59) :                                   "return"
; P/power_test_ok.p(59) :                                   VariableExpression
; P/power_test_ok.p(59) :                                       VariableName
; P/power_test_ok.p(59) :                                           "power"
; P/power_test_ok.p(59) :                                   ";"
; P/power_test_ok.p(60) :                       "}"
; P/power_test_ok.p(62) :               LocalDeclaration
; P/power_test_ok.p(62) :                   FunctionDeclaration
; P/power_test_ok.p(62) :                       "func"
; P/power_test_ok.p(62) :                       FunctionName
; P/power_test_ok.p(62) :                           "SetPower"
; P/power_test_ok.p(62) :                       "("
; P/power_test_ok.p(63) :                       FunctionParameterList
; P/power_test_ok.p(63) :                           FunctionParameter
; P/power_test_ok.p(63) :                               "ref"
; P/power_test_ok.p(63) :                               VariableName
; P/power_test_ok.p(63) :                                   "power"
; P/power_test_ok.p(63) :                               ":"
; P/power_test_ok.p(63) :                               VariableType
; P/power_test_ok.p(63) :                                   "int"
; P/power_test_ok.p(63) :                           ","
; P/power_test_ok.p(64) :                           FunctionParameter
; P/power_test_ok.p(64) :                               VariableName
; P/power_test_ok.p(64) :                                   "basis"
; P/power_test_ok.p(64) :                               ":"
; P/power_test_ok.p(64) :                               VariableType
; P/power_test_ok.p(64) :                                   "int"
; P/power_test_ok.p(64) :                           ","
; P/power_test_ok.p(65) :                           FunctionParameter
; P/power_test_ok.p(65) :                               VariableName
; P/power_test_ok.p(65) :                                   "exponent"
; P/power_test_ok.p(65) :                               ":"
; P/power_test_ok.p(65) :                               VariableType
; P/power_test_ok.p(65) :                                   "int"
; P/power_test_ok.p(66) :                       ")"
; P/power_test_ok.p(66) :                       ":"
; P/power_test_ok.p(66) :                       FunctionType
; P/power_test_ok.p(66) :                           "void"
; P/power_test_ok.p(67) :                       "{"
; P/power_test_ok.p(68) :                       LocalDeclarationList
; P/power_test_ok.p(68) :                       StatementList
; P/power_test_ok.p(68) :                           Statement
; P/power_test_ok.p(68) :                               AssignmentStatement
; P/power_test_ok.p(68) :                                   VariableExpression
; P/power_test_ok.p(68) :                                       VariableName
; P/power_test_ok.p(68) :                                           "power"
; P/power_test_ok.p(68) :                                   "="
; P/power_test_ok.p(68) :                                   FunctionCallExpression
; P/power_test_ok.p(68) :                                       FunctionCall
; P/power_test_ok.p(68) :                                           FunctionName
; P/power_test_ok.p(68) :                                               "GetPower"
; P/power_test_ok.p(68) :                                           "("
; P/power_test_ok.p(68) :                                           FunctionArgumentList
; P/power_test_ok.p(68) :                                               FunctionArgument
; P/power_test_ok.p(68) :                                                   VariableExpression
; P/power_test_ok.p(68) :                                                       VariableName
; P/power_test_ok.p(68) :                                                           "basis"
; P/power_test_ok.p(68) :                                               ","
; P/power_test_ok.p(68) :                                               FunctionArgument
; P/power_test_ok.p(68) :                                                   VariableExpression
; P/power_test_ok.p(68) :                                                       VariableName
; P/power_test_ok.p(68) :                                                           "exponent"
; P/power_test_ok.p(68) :                                           ")"
; P/power_test_ok.p(68) :                                   ";"
; P/power_test_ok.p(69) :                       "}"
; P/power_test_ok.p(71) :               LocalDeclaration
; P/power_test_ok.p(71) :                   FunctionDeclaration
; P/power_test_ok.p(71) :                       "func"
; P/power_test_ok.p(71) :                       FunctionName
; P/power_test_ok.p(71) :                           "GetSquare"
; P/power_test_ok.p(71) :                       "("
; P/power_test_ok.p(72) :                       FunctionParameterList
; P/power_test_ok.p(72) :                           FunctionParameter
; P/power_test_ok.p(72) :                               VariableName
; P/power_test_ok.p(72) :                                   "basis"
; P/power_test_ok.p(72) :                               ":"
; P/power_test_ok.p(72) :                               VariableType
; P/power_test_ok.p(72) :                                   "int"
; P/power_test_ok.p(73) :                       ")"
; P/power_test_ok.p(73) :                       ":"
; P/power_test_ok.p(73) :                       FunctionType
; P/power_test_ok.p(73) :                           "int"
; P/power_test_ok.p(74) :                       "{"
; P/power_test_ok.p(75) :                       LocalDeclarationList
; P/power_test_ok.p(75) :                           LocalDeclaration
; P/power_test_ok.p(75) :                               VariableDeclaration
; P/power_test_ok.p(75) :                                   "var"
; P/power_test_ok.p(76) :                                   Variable
; P/power_test_ok.p(76) :                                       VariableName
; P/power_test_ok.p(76) :                                           "square"
; P/power_test_ok.p(76) :                                       ":"
; P/power_test_ok.p(76) :                                       VariableType
; P/power_test_ok.p(76) :                                           "int"
; P/power_test_ok.p(76) :                                   ";"
; P/power_test_ok.p(78) :                       StatementList
; P/power_test_ok.p(78) :                           Statement
; P/power_test_ok.p(78) :                               AssignmentStatement
; P/power_test_ok.p(78) :                                   VariableExpression
; P/power_test_ok.p(78) :                                       VariableName
; P/power_test_ok.p(78) :                                           "square"
; P/power_test_ok.p(78) :                                   "="
; P/power_test_ok.p(78) :                                   FunctionCallExpression
; P/power_test_ok.p(78) :                                       FunctionCall
; P/power_test_ok.p(78) :                                           FunctionName
; P/power_test_ok.p(78) :                                               "GetPower"
; P/power_test_ok.p(78) :                                           "("
; P/power_test_ok.p(78) :                                           FunctionArgumentList
; P/power_test_ok.p(78) :                                               FunctionArgument
; P/power_test_ok.p(78) :                                                   VariableExpression
; P/power_test_ok.p(78) :                                                       VariableName
; P/power_test_ok.p(78) :                                                           "basis"
; P/power_test_ok.p(78) :                                               ","
; P/power_test_ok.p(78) :                                               FunctionArgument
; P/power_test_ok.p(78) :                                                   IntegerConstantExpression
; P/power_test_ok.p(78) :                                                       IntegerConstant
; P/power_test_ok.p(78) :                                                           "2"
; P/power_test_ok.p(78) :                                           ")"
; P/power_test_ok.p(78) :                                   ";"
; P/power_test_ok.p(80) :                           Statement
; P/power_test_ok.p(80) :                               ReturnStatement
; P/power_test_ok.p(80) :                                   "return"
; P/power_test_ok.p(80) :                                   VariableExpression
; P/power_test_ok.p(80) :                                       VariableName
; P/power_test_ok.p(80) :                                           "square"
; P/power_test_ok.p(80) :                                   ";"
; P/power_test_ok.p(81) :                       "}"
; P/power_test_ok.p(83) :               LocalDeclaration
; P/power_test_ok.p(83) :                   FunctionDeclaration
; P/power_test_ok.p(83) :                       "func"
; P/power_test_ok.p(83) :                       FunctionName
; P/power_test_ok.p(83) :                           "SetSquare"
; P/power_test_ok.p(83) :                       "("
; P/power_test_ok.p(84) :                       FunctionParameterList
; P/power_test_ok.p(84) :                           FunctionParameter
; P/power_test_ok.p(84) :                               "ref"
; P/power_test_ok.p(84) :                               VariableName
; P/power_test_ok.p(84) :                                   "square"
; P/power_test_ok.p(84) :                               ":"
; P/power_test_ok.p(84) :                               VariableType
; P/power_test_ok.p(84) :                                   "int"
; P/power_test_ok.p(84) :                           ","
; P/power_test_ok.p(85) :                           FunctionParameter
; P/power_test_ok.p(85) :                               VariableName
; P/power_test_ok.p(85) :                                   "basis"
; P/power_test_ok.p(85) :                               ":"
; P/power_test_ok.p(85) :                               VariableType
; P/power_test_ok.p(85) :                                   "int"
; P/power_test_ok.p(86) :                       ")"
; P/power_test_ok.p(86) :                       ":"
; P/power_test_ok.p(86) :                       FunctionType
; P/power_test_ok.p(86) :                           "void"
; P/power_test_ok.p(87) :                       "{"
; P/power_test_ok.p(88) :                       LocalDeclarationList
; P/power_test_ok.p(88) :                       StatementList
; P/power_test_ok.p(88) :                           Statement
; P/power_test_ok.p(88) :                               ExpressionStatement
; P/power_test_ok.p(88) :                                   FunctionCallExpression
; P/power_test_ok.p(88) :                                       FunctionCall
; P/power_test_ok.p(88) :                                           FunctionName
; P/power_test_ok.p(88) :                                               "SetPower"
; P/power_test_ok.p(88) :                                           "("
; P/power_test_ok.p(88) :                                           FunctionArgumentList
; P/power_test_ok.p(88) :                                               FunctionArgument
; P/power_test_ok.p(88) :                                                   VariableExpression
; P/power_test_ok.p(88) :                                                       VariableName
; P/power_test_ok.p(88) :                                                           "square"
; P/power_test_ok.p(88) :                                               ","
; P/power_test_ok.p(88) :                                               FunctionArgument
; P/power_test_ok.p(88) :                                                   VariableExpression
; P/power_test_ok.p(88) :                                                       VariableName
; P/power_test_ok.p(88) :                                                           "basis"
; P/power_test_ok.p(88) :                                               ","
; P/power_test_ok.p(88) :                                               FunctionArgument
; P/power_test_ok.p(88) :                                                   IntegerConstantExpression
; P/power_test_ok.p(88) :                                                       IntegerConstant
; P/power_test_ok.p(88) :                                                           "2"
; P/power_test_ok.p(88) :                                           ")"
; P/power_test_ok.p(88) :                                   ";"
; P/power_test_ok.p(89) :                       "}"
; P/power_test_ok.p(91) :           StatementList
; P/power_test_ok.p(91) :               Statement
; P/power_test_ok.p(91) :                   AssignmentStatement
; P/power_test_ok.p(91) :                       VariableExpression
; P/power_test_ok.p(91) :                           VariableName
; P/power_test_ok.p(91) :                               "power"
; P/power_test_ok.p(91) :                       "="
; P/power_test_ok.p(91) :                       FunctionCallExpression
; P/power_test_ok.p(91) :                           FunctionCall
; P/power_test_ok.p(91) :                               FunctionName
; P/power_test_ok.p(91) :                                   "GetRecursivePower"
; P/power_test_ok.p(91) :                               "("
; P/power_test_ok.p(91) :                               FunctionArgumentList
; P/power_test_ok.p(91) :                                   FunctionArgument
; P/power_test_ok.p(91) :                                       IntegerConstantExpression
; P/power_test_ok.p(91) :                                           IntegerConstant
; P/power_test_ok.p(91) :                                               "5"
; P/power_test_ok.p(91) :                                   ","
; P/power_test_ok.p(91) :                                   FunctionArgument
; P/power_test_ok.p(91) :                                       IntegerConstantExpression
; P/power_test_ok.p(91) :                                           IntegerConstant
; P/power_test_ok.p(91) :                                               "2"
; P/power_test_ok.p(91) :                               ")"
; P/power_test_ok.p(91) :                       ";"
; P/power_test_ok.p(92) :               Statement
; P/power_test_ok.p(92) :                   WriteStatement
; P/power_test_ok.p(92) :                       "write"
; P/power_test_ok.p(92) :                       VariableExpression
; P/power_test_ok.p(92) :                           VariableName
; P/power_test_ok.p(92) :                               "power"
; P/power_test_ok.p(92) :                       ";"
; P/power_test_ok.p(94) :               Statement
; P/power_test_ok.p(94) :                   ExpressionStatement
; P/power_test_ok.p(94) :                       FunctionCallExpression
; P/power_test_ok.p(94) :                           FunctionCall
; P/power_test_ok.p(94) :                               FunctionName
; P/power_test_ok.p(94) :                                   "SetRecursivePower"
; P/power_test_ok.p(94) :                               "("
; P/power_test_ok.p(94) :                               FunctionArgumentList
; P/power_test_ok.p(94) :                                   FunctionArgument
; P/power_test_ok.p(94) :                                       VariableExpression
; P/power_test_ok.p(94) :                                           VariableName
; P/power_test_ok.p(94) :                                               "power"
; P/power_test_ok.p(94) :                                   ","
; P/power_test_ok.p(94) :                                   FunctionArgument
; P/power_test_ok.p(94) :                                       IntegerConstantExpression
; P/power_test_ok.p(94) :                                           IntegerConstant
; P/power_test_ok.p(94) :                                               "5"
; P/power_test_ok.p(94) :                                   ","
; P/power_test_ok.p(94) :                                   FunctionArgument
; P/power_test_ok.p(94) :                                       IntegerConstantExpression
; P/power_test_ok.p(94) :                                           IntegerConstant
; P/power_test_ok.p(94) :                                               "2"
; P/power_test_ok.p(94) :                               ")"
; P/power_test_ok.p(94) :                       ";"
; P/power_test_ok.p(95) :               Statement
; P/power_test_ok.p(95) :                   WriteStatement
; P/power_test_ok.p(95) :                       "write"
; P/power_test_ok.p(95) :                       VariableExpression
; P/power_test_ok.p(95) :                           VariableName
; P/power_test_ok.p(95) :                               "power"
; P/power_test_ok.p(95) :                       ";"
; P/power_test_ok.p(97) :               Statement
; P/power_test_ok.p(97) :                   AssignmentStatement
; P/power_test_ok.p(97) :                       VariableExpression
; P/power_test_ok.p(97) :                           VariableName
; P/power_test_ok.p(97) :                               "power"
; P/power_test_ok.p(97) :                       "="
; P/power_test_ok.p(97) :                       FunctionCallExpression
; P/power_test_ok.p(97) :                           FunctionCall
; P/power_test_ok.p(97) :                               FunctionName
; P/power_test_ok.p(97) :                                   "GetPower"
; P/power_test_ok.p(97) :                               "("
; P/power_test_ok.p(97) :                               FunctionArgumentList
; P/power_test_ok.p(97) :                                   FunctionArgument
; P/power_test_ok.p(97) :                                       IntegerConstantExpression
; P/power_test_ok.p(97) :                                           IntegerConstant
; P/power_test_ok.p(97) :                                               "5"
; P/power_test_ok.p(97) :                                   ","
; P/power_test_ok.p(97) :                                   FunctionArgument
; P/power_test_ok.p(97) :                                       IntegerConstantExpression
; P/power_test_ok.p(97) :                                           IntegerConstant
; P/power_test_ok.p(97) :                                               "2"
; P/power_test_ok.p(97) :                               ")"
; P/power_test_ok.p(97) :                       ";"
; P/power_test_ok.p(98) :               Statement
; P/power_test_ok.p(98) :                   WriteStatement
; P/power_test_ok.p(98) :                       "write"
; P/power_test_ok.p(98) :                       VariableExpression
; P/power_test_ok.p(98) :                           VariableName
; P/power_test_ok.p(98) :                               "power"
; P/power_test_ok.p(98) :                       ";"
; P/power_test_ok.p(100) :              Statement
; P/power_test_ok.p(100) :                  ExpressionStatement
; P/power_test_ok.p(100) :                      FunctionCallExpression
; P/power_test_ok.p(100) :                          FunctionCall
; P/power_test_ok.p(100) :                              FunctionName
; P/power_test_ok.p(100) :                                  "SetPower"
; P/power_test_ok.p(100) :                              "("
; P/power_test_ok.p(100) :                              FunctionArgumentList
; P/power_test_ok.p(100) :                                  FunctionArgument
; P/power_test_ok.p(100) :                                      VariableExpression
; P/power_test_ok.p(100) :                                          VariableName
; P/power_test_ok.p(100) :                                              "power"
; P/power_test_ok.p(100) :                                  ","
; P/power_test_ok.p(100) :                                  FunctionArgument
; P/power_test_ok.p(100) :                                      IntegerConstantExpression
; P/power_test_ok.p(100) :                                          IntegerConstant
; P/power_test_ok.p(100) :                                              "5"
; P/power_test_ok.p(100) :                                  ","
; P/power_test_ok.p(100) :                                  FunctionArgument
; P/power_test_ok.p(100) :                                      IntegerConstantExpression
; P/power_test_ok.p(100) :                                          IntegerConstant
; P/power_test_ok.p(100) :                                              "2"
; P/power_test_ok.p(100) :                              ")"
; P/power_test_ok.p(100) :                      ";"
; P/power_test_ok.p(101) :              Statement
; P/power_test_ok.p(101) :                  WriteStatement
; P/power_test_ok.p(101) :                      "write"
; P/power_test_ok.p(101) :                      VariableExpression
; P/power_test_ok.p(101) :                          VariableName
; P/power_test_ok.p(101) :                              "power"
; P/power_test_ok.p(101) :                      ";"
; P/power_test_ok.p(103) :              Statement
; P/power_test_ok.p(103) :                  AssignmentStatement
; P/power_test_ok.p(103) :                      VariableExpression
; P/power_test_ok.p(103) :                          VariableName
; P/power_test_ok.p(103) :                              "square"
; P/power_test_ok.p(103) :                      "="
; P/power_test_ok.p(103) :                      FunctionCallExpression
; P/power_test_ok.p(103) :                          FunctionCall
; P/power_test_ok.p(103) :                              FunctionName
; P/power_test_ok.p(103) :                                  "GetSquare"
; P/power_test_ok.p(103) :                              "("
; P/power_test_ok.p(103) :                              FunctionArgumentList
; P/power_test_ok.p(103) :                                  FunctionArgument
; P/power_test_ok.p(103) :                                      IntegerConstantExpression
; P/power_test_ok.p(103) :                                          IntegerConstant
; P/power_test_ok.p(103) :                                              "5"
; P/power_test_ok.p(103) :                              ")"
; P/power_test_ok.p(103) :                      ";"
; P/power_test_ok.p(104) :              Statement
; P/power_test_ok.p(104) :                  WriteStatement
; P/power_test_ok.p(104) :                      "write"
; P/power_test_ok.p(104) :                      VariableExpression
; P/power_test_ok.p(104) :                          VariableName
; P/power_test_ok.p(104) :                              "square"
; P/power_test_ok.p(104) :                      ";"
; P/power_test_ok.p(106) :              Statement
; P/power_test_ok.p(106) :                  ExpressionStatement
; P/power_test_ok.p(106) :                      FunctionCallExpression
; P/power_test_ok.p(106) :                          FunctionCall
; P/power_test_ok.p(106) :                              FunctionName
; P/power_test_ok.p(106) :                                  "SetSquare"
; P/power_test_ok.p(106) :                              "("
; P/power_test_ok.p(106) :                              FunctionArgumentList
; P/power_test_ok.p(106) :                                  FunctionArgument
; P/power_test_ok.p(106) :                                      VariableExpression
; P/power_test_ok.p(106) :                                          VariableName
; P/power_test_ok.p(106) :                                              "square"
; P/power_test_ok.p(106) :                                  ","
; P/power_test_ok.p(106) :                                  FunctionArgument
; P/power_test_ok.p(106) :                                      IntegerConstantExpression
; P/power_test_ok.p(106) :                                          IntegerConstant
; P/power_test_ok.p(106) :                                              "5"
; P/power_test_ok.p(106) :                              ")"
; P/power_test_ok.p(106) :                      ";"
; P/power_test_ok.p(107) :              Statement
; P/power_test_ok.p(107) :                  WriteStatement
; P/power_test_ok.p(107) :                      "write"
; P/power_test_ok.p(107) :                      VariableExpression
; P/power_test_ok.p(107) :                          VariableName
; P/power_test_ok.p(107) :                              "square"
; P/power_test_ok.p(107) :                      ";"
; P/power_test_ok.p(108) :          "}"
